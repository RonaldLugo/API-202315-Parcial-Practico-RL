{
	"info": {
		"_postman_id": "0eeace72-3400-4d88-83d3-ed5bc6db5f53",
		"name": "Productos/Tiendas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31259509"
	},
	"item": [
		{
			"name": "Crear un producto válido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"product_id\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nombre\": \"Queso\",\r\n    \"precio\": \"10000\",\r\n    \"tipo\": \"perecedero\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/{{version}}/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{version}}",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear una tienda válida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"store_id\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nombre\": \"Supermercado APIs\",\r\n    \"ciudad\": \"BOG\",\r\n    \"direccion\": \"AV Siempre viva 123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/{{version}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{version}}",
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear segunda tienda válida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"store_id_2\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nombre\": \"Supermercado Alpaca\",\r\n    \"ciudad\": \"MED\",\r\n    \"direccion\": \"Calle falsa 123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/{{version}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{version}}",
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "Agregar una nueva tienda a las oferentes de un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{version}}/products/{{product_id}}/stores/{{store_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{version}}",
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Asociar una tienda que no existe a las oferentes de un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"La tienda con id 00000000-0000-0000-0000-000000000000 no existe\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{version}}/products/{{product_id}}/stores/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{version}}",
						"products",
						"{{product_id}}",
						"stores",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener todas las tiendas que ofrecen un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{version}}/products/{{product_id}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{version}}",
						"products",
						"{{product_id}}",
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener una tienda que ofrece un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{version}}/products/{{product_id}}/stores/{{store_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{version}}",
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener una tienda que ofrece un producto que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.contain(\"El producto con id 00000000-0000-0000-0000-000000000000 no existe\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{version}}/products/00000000-0000-0000-0000-000000000000/stores/{{store_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{version}}",
						"products",
						"00000000-0000-0000-0000-000000000000",
						"stores",
						"{{store_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar las tiendas que ofrecen un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n        \"id\": \"{{store_id}}\"\r\n    },\r\n    {\r\n        \"id\": \"{{store_id_2}}\"\r\n    }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/{{version}}/products/{{product_id}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{version}}",
						"products",
						"{{product_id}}",
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar las tiendas que ofrecen un producto, con una tienda inexistente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"La tienda con id 00000000-0000-0000-0000-000000000000 no existe\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n        \"id\": \"{{store_id}}\"\r\n    },\r\n    {\r\n        \"id\": \"00000000-0000-0000-0000-000000000000\"\r\n    }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/{{version}}/products/{{product_id}}/stores",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{version}}",
						"products",
						"{{product_id}}",
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar una tienda que ofrece un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"   pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{version}}/products/{{product_id}}/stores/{{store_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{version}}",
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar una tienda que no ofrece un producto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {\r",
							"   pm.response.to.have.status(412);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.contain(\"La tienda no está asociada con el producto\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/{{version}}/products/{{product_id}}/stores/{{store_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"{{version}}",
						"products",
						"{{product_id}}",
						"stores",
						"{{store_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "version",
			"value": "api/v1",
			"type": "string"
		}
	]
}